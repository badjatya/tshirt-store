openapi: "3.0.0"
info:
  title: T-Shirt Store API
  description: A Collection of REST API for the T-Shirt Store
  version: 1.0.1
  contact:
    url: "https://badjatya.github.io"
    email: architj240@gmail.com

servers:
  - url: "{protocol}://localhost:{port}/api/{version}"
    description: A local host server of the API
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      port:
        enum:
          - 5000
          - 8000
          - 4000
        default: 5000
      version:
        enum:
          - v1
          - v2
        default: v1

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /dummy:
    get:
      tags:
        - Home
      summary: A basic home route for greeting
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  greeting:
                    type: string
                  dummy:
                    type: boolean
        500:
          description: Internal server error

  /users/signup:
    post:
      tags:
        - User
      summary: creates a new user, required name, email, password and photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - photo
              properties:
                name:
                  type: string
                  description: The name must be less than 40 characters
                email:
                  type: string
                  description: The email must be unique
                password:
                  type: string
                  description: The password must be of 6 characters
                photo:
                  in: formData
                  description: The uploaded file data
                  type: file
                  format: binary
      responses:
        201:
          description: success, user signup's
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request, something went wrong please check all the fields
        500:
          description: Internal server error

  /users/login:
    post:
      tags:
        - User
      summary: login a new user. required files are -  email and password. Also adds httpOnly cookie in browser. It sends token in response too.
      consumes: application/json
      produces: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "one@dev.com"
                password:
                  type: string
                  example: "123456"
      responses:
        201:
          description: User successfully logged in, returns user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: email and password are required
        401:
          description: email or password are incorrect or does not exist
        500:
          description: internal server error, please try after some time

  /users/logout:
    get:
      tags:
        - User
      summary: logout an logged in user
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            default: token
      responses:
        200:
          description: User successfully logged out, returns an object and also removes httpOnly cookies, in mobile send header Authorization token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        500:
          description: internal server error, please try after some time

  /users/forgot-password:
    post:
      tags:
        - User
      summary: sends an email with link to forgot password. Contains the token for user validation. Public hosted version will not send email to your account. Use your own SMTP details to access this feature on local project
      consumes: application/json
      produces: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: two@dev.com
      responses:
        200:
          description: all good, an email will be sent at email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: email is required
        404:
          description: user not found
        500:
          description: internal server error, please try again after sometime

  /users/password/reset/{token}:
    post:
      tags:
        - User
      summary: Allows user to reset password, validated based on token. send password and confirm password fields
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        201:
          description: password updated, returns user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: password and confirmPassword does not match
        401:
          description: token is invalid or expired
        500:
          description: Internal server error, please try again after some time

  /users/profile:
    get:
      tags:
        - User
      summary: Gets all details about logged in user. Send token in cookies as named token or send Bearer Auth
      responses:
        200:
          description: success, returns an object with user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /users/password/update:
    patch:
      tags:
        - User
      summary: User can update the password if he is logged in. Send oldPassword and password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - password
              properties:
                oldPassword:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: password updated returns user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: oldPassword and password is required
        401:
          description: oldPassword does not match
        500:
          description: internal server error, please try again after sometime

  /users/profile/update:
    patch:
      tags:
        - User
      summary: User can update the name, emails and photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                photo:
                  in: formData
                  description: The uploaded file data
                  type: file
                  format: binary
      responses:
        201:
          description: Updated user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        500:
          description: internal server error

  /admin/users:
    get:
      tags:
        - Admin
      summary: returns an array of users but only admin can access
      responses:
        200:
          description: returns an array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  results:
                    type: number
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secureUrl:
                              type: string
                        createdAt:
                          type: string
                        __v:
                          type: string

  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get details of a single user based on the user id
      parameters:
        - name: id
          required: true
          in: path
          default: 61a33e97a651fadf42b2fc8a
          schema:
            type: string
      responses:
        200:
          description: returns the user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        500:
          description: internal server error

          /admin/users/{id}:
    patch:
      tags:
        - Admin
      summary: If user is admin, he can update name, email and role of user based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: formData
          required: true
          schema:
            type: string
        - name: email
          in: formData
          required: true
          schema:
            type: string
        - name: role
          in: formData
          required: true
          schema:
            type: string
            enum: [user, admin, manager]
      responses:
        200:
          description: returns the updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        500:
          description: internal server error
    delete:
      tags:
        - Admin
      summary: If user is admin, he can delete the user based on user id
      parameters:
        - name: id
          required: true
          in: path
          default: 61a33e97a651fadf42b2fc8a
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: bad request
        500:
          description: internal server error

  /product/add:
    post:
      tags:
        - Product
      summary: Admin can add new products
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - category
                - stock
                - brand
                - photos
              properties:
                name:
                  type: string
                  description: Product name should not be more than 120 characters
                price:
                  type: number
                  description: price of product cant be more than 6 digits
                description:
                  type: string
                  description: Provide a description of the product
                category:
                  type: string
                  enum:
                    - shortSleeves
                    - longSleeves
                    - sweatShirt
                    - hoodie
                  description: please select from category ONLY
                stock:
                  type: number
                  description: Enter the amount of quantity available
                brand:
                  type: string
                  description: select the brand of the product
                  enum:
                    - LCO
                    - Archit
                    - Badjatya
                photos:
                  type: array
                  description: The upload product images
                  items:
                    in: formData
                    type: file
                    format: binary
                  # in: formData
                  # description: The uploaded file data
                  # type: file
                  # format: binary
      responses:
        201:
          description: success, New product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      category:
                        type: string
                      stock:
                        type: number
                      brand:
                        type: string
                      ratings:
                        type: number
                      numberOfReviews:
                        type: number
                      user:
                        type: string
                      reviews:
                        type: array
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secureUrl:
                              type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: name, price, description, category, brand and photos are required also admin should be login
        500:
          description: Internal server error
