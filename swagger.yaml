openapi: "3.0.0"
info:
  title: T-Shirt Store API
  description: A Collection of REST API for the T-Shirt Store
  version: 1.0.1
  contact:
    url: "https://badjatya.github.io"
    email: architj240@gmail.com

servers:
  - url: "{protocol}://localhost:{port}/api/{version}"
    description: A local host server of the API
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      port:
        enum:
          - 5000
          - 8000
          - 4000
        default: 5000
      version:
        enum:
          - v1
          - v2
        default: v1

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /users/signup:
    post:
      tags:
        - User
      summary: creates a new user, required name, email, password and photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - photo
              properties:
                name:
                  type: string
                  description: The name must be less than 40 characters
                email:
                  type: string
                  description: The email must be unique
                password:
                  type: string
                  description: The password must be of 6 characters
                photo:
                  in: formData
                  description: The uploaded file data
                  type: file
                  format: binary
      responses:
        201:
          description: success, user signup's
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request, something went wrong please check all the fields
        500:
          description: Internal server error

  /users/login:
    post:
      tags:
        - User
      summary: login a new user. required files are -  email and password. Also adds httpOnly cookie in browser. It sends token in response too.
      consumes: application/json
      produces: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "one@dev.com"
                password:
                  type: string
                  example: "123456"
      responses:
        201:
          description: User successfully logged in, returns user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: email and password are required
        401:
          description: email or password are incorrect or does not exist
        500:
          description: internal server error, please try after some time

  /users/logout:
    get:
      tags:
        - User
      summary: logout an logged in user
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            default: token
      responses:
        200:
          description: User successfully logged out, returns an object and also removes httpOnly cookies, in mobile send header Authorization token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        500:
          description: internal server error, please try after some time

  /users/forgot-password:
    post:
      tags:
        - User
      summary: sends an email with link to forgot password. Contains the token for user validation. Public hosted version will not send email to your account. Use your own SMTP details to access this feature on local project
      consumes: application/json
      produces: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: two@dev.com
      responses:
        200:
          description: all good, an email will be sent at email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: email is required
        404:
          description: user not found
        500:
          description: internal server error, please try again after sometime

  /users/password/reset/{token}:
    post:
      tags:
        - User
      summary: Allows user to reset password, validated based on token. send password and confirm password fields
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        201:
          description: password updated, returns user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: password and confirmPassword does not match
        401:
          description: token is invalid or expired
        500:
          description: Internal server error, please try again after some time

  /users/profile:
    get:
      tags:
        - User
      summary: Gets all details about logged in user. Send token in cookies as named token or send Bearer Auth
      responses:
        200:
          description: success, returns an object with user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /users/password/update:
    patch:
      tags:
        - User
      summary: User can update the password if he is logged in. Send oldPassword and password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - password
              properties:
                oldPassword:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: password updated returns user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: oldPassword and password is required
        401:
          description: oldPassword does not match
        500:
          description: internal server error, please try again after sometime

  /users/profile/update:
    patch:
      tags:
        - User
      summary: User can update the name, emails and photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                photo:
                  in: formData
                  description: The uploaded file data
                  type: file
                  format: binary
      responses:
        201:
          description: Updated user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        500:
          description: internal server error

  /admin/users:
    get:
      tags:
        - Admin
      summary: returns an array of users but only admin can access
      responses:
        200:
          description: returns an array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  results:
                    type: number
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secureUrl:
                              type: string
                        createdAt:
                          type: string
                        __v:
                          type: string

  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get details of a single user based on the user id
      parameters:
        - name: id
          required: true
          in: path
          default: 61a33e97a651fadf42b2fc8a
          schema:
            type: string
      responses:
        200:
          description: returns the user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        500:
          description: internal server error

          /admin/users/{id}:
    patch:
      tags:
        - Admin
      summary: If user is admin, he can update name, email and role of user based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: formData
          required: true
          schema:
            type: string
        - name: email
          in: formData
          required: true
          schema:
            type: string
        - name: role
          in: formData
          required: true
          schema:
            type: string
            enum: [user, admin, manager]
      responses:
        200:
          description: returns the updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secureUrl:
                            type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        500:
          description: internal server error
    delete:
      tags:
        - Admin
      summary: If user is admin, he can delete the user based on user id
      parameters:
        - name: id
          required: true
          in: path
          default: 61a33e97a651fadf42b2fc8a
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: bad request
        500:
          description: internal server error

  /product/add:
    post:
      tags:
        - Product
      summary: Admin can add new products
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - category
                - stock
                - brand
                - photos
              properties:
                name:
                  type: string
                  description: Product name should not be more than 120 characters
                price:
                  type: number
                  description: price of product cant be more than 6 digits
                description:
                  type: string
                  description: Provide a description of the product
                category:
                  type: string
                  enum:
                    - shortSleeves
                    - longSleeves
                    - sweatShirt
                    - hoodie
                  description: please select from category ONLY
                stock:
                  type: number
                  description: Enter the amount of quantity available
                brand:
                  type: string
                  description: select the brand of the product
                  enum:
                    - LCO
                    - Archit
                    - Badjatya
                photos:
                  type: array
                  description: The upload product images
                  items:
                    in: formData
                    type: file
                    format: binary
                  # in: formData
                  # description: The uploaded file data
                  # type: file
                  # format: binary
      responses:
        201:
          description: success, New product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      category:
                        type: string
                      stock:
                        type: number
                      brand:
                        type: string
                      ratings:
                        type: number
                      numberOfReviews:
                        type: number
                      user:
                        type: string
                      reviews:
                        type: array
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secureUrl:
                              type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: name, price, description, category, brand and photos are required also admin should be login
        500:
          description: Internal server error

  /product:
    get:
      tags:
        - Product
      summary: returns a list of products, a logged in user can view
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: user can search a product by the name of the product
        - name: price
          schema:
            type: string
          in: query
          description: In frontend or postman u can use price[gt]=100 (gt,gte,lt,lte) here u can only price=500
        - name: ratings
          schema:
            type: string
          in: query
          description: In frontend or postman u can use rating[gt]=3.0 (gt,gte,lt,lte) here u can only rating=4.0
        - name: limit
          schema:
            type: string
          in: query
          description: user can limit the number of products shown in per page
        - name: page
          schema:
            type: string
          in: query
          description: user can view different page
      responses:
        200:
          description: returns an array of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  result:
                    type: number
                  totalProducts:
                    type: number
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        price:
                          type: number
                        description:
                          type: string
                        category:
                          type: string
                        stock:
                          type: number
                        brand:
                          type: string
                        ratings:
                          type: number
                        numberOfReviews:
                          type: number
                        user:
                          type: string
                        reviews:
                          type: array
                        photos:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              secureUrl:
                                type: string
                        createdAt:
                          type: string
                        __v:
                          type: string
        400:
          description: bad request
        500:
          description: internal server error

  /product/{id}:
    get:
      tags:
        - Product
      summary: returns a single product based on the id
      parameters:
        - name: id
          required: true
          in: path
          default: 61a50d4655199d36b798dffc
          description: enter the product's id to get the details of single product
          schema:
            type: string
      responses:
        200:
          description: success, return the object containing the product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      category:
                        type: string
                      stock:
                        type: number
                      brand:
                        type: string
                      ratings:
                        type: number
                      numberOfReviews:
                        type: number
                      user:
                        type: string
                      reviews:
                        type: array
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secureUrl:
                              type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        404:
          description: product not found, try different product id
        500:
          description: internal server error
    patch:
      tags:
        - Product
      summary: Admin can update the product details except images
      parameters:
        - name: id
          required: true
          in: path
          default: 61a50d4655199d36b798dffc
          description: Enter the product's id to get the details of single product
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name should not be more than 120 characters
                price:
                  type: number
                  description: price of product cant be more than 6 digits
                description:
                  type: string
                  description: Provide a description of the product
                category:
                  type: string
                  enum:
                    - shortSleeves
                    - longSleeves
                    - sweatShirt
                    - hoodie
                  description: please select from category ONLY
                stock:
                  type: number
                  description: Enter the amount of quantity available
                brand:
                  type: string
                  description: select the brand of the product
                  enum:
                    - LCO
                    - Archit
                    - Badjatya
      responses:
        200:
          description: success, return the object containing the product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      category:
                        type: string
                      stock:
                        type: number
                      brand:
                        type: string
                      ratings:
                        type: number
                      numberOfReviews:
                        type: number
                      user:
                        type: string
                      reviews:
                        type: array
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secureUrl:
                              type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        404:
          description: product not found, try different product id
        500:
          description: internal server error
    delete:
      tags:
        - Product
      summary: Admin can delete the product
      parameters:
        - name: id
          required: true
          in: path
          default: 61a50d4655199d36b798dffc
          description: enter the product's id to get the details of single product
          schema:
            type: string
      responses:
        200:
          description: success, product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: bad request
        404:
          description: product not found, try different product id
        500:
          description: internal server error

  /product/review:
    post:
      tags:
        - Product
      summary: User can add review on a product based on productId
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Enter the productId to add review on that product
                  default: 61a50d4655199d36b798dffc
                rating:
                  type: number
                  description: Enter the rating for the product between 1 to 5
                  default: 4
                comment:
                  type: string
                  description: Enter the comment about the product
                  default: A very nice good product
      responses:
        200:
          description: successfully, added the review
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: bad request, A review must contain rating, comment and productId
        404:
          description: Product not found
        500:
          description: internal server error

  /product/review/{id}:
    delete:
      tags:
        - Product
      summary: User can delete review of a product which he created
      parameters:
        - name: id
          in: path
          schema:
            type: string
          description: Enter the productId to delete the review of that product that u have created
          default: 61a50d4655199d36b798dffc
      responses:
        200:
          description: successfully, deleted the review
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: bad request
        404:
          description: Product not found
        500:
          description: internal server error
    get:
      tags:
        - Product
      summary: returns a list of reviews of a single product base don productId
      parameters:
        - name: id
          in: path
          schema:
            type: string
          description: Enter the productId to get the review of a product
          default: 61a50d4655199d36b798dffc
      responses:
        200:
          description: successfully, review list
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        user:
                          type: string
                        name:
                          type: string
                        rating:
                          type: number
                        comment:
                          type: string
        400:
          description: bad request
        404:
          description: Product not found
        500:
          description: internal server error

  /order/create:
    post:
      tags:
        - Order
      summary: Creates a new order of a product, requires shippingInfo, orderItems, paymentInfo, taxAmount, shippingAmount and totalAmount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - shippingInfo
                - orderItems
                - paymentInfo
                - taxAmount
                - shippingAmount
                - totalAmount
              properties:
                shippingInfo:
                  type: object
                  description: Enter the details of shipping
                  required:
                    - address
                    - phoneNumber
                    - city
                    - state
                    - country
                    - postalCode
                  properties:
                    address:
                      type: string
                      description: Enter the user address where product should be delivered
                      example: Treasure island
                    phoneNumber:
                      type: number
                      description: Enter the mobile number
                      example: 9898989898
                    city:
                      type: string
                      description: Enter the user's city
                      example: Indore
                    state:
                      type: string
                      description: Enter the state of the user
                      example: Madhya Pradesh
                    country:
                      type: string
                      description: Enter the user's country
                      example: India
                    postalCode:
                      type: number
                      description: Enter the user's postal code or zip code or pin code
                      example: 452001
                orderItems:
                  type: array
                  description: Enter the list of products that user is ordering
                  items:
                    type: object
                    required:
                      - productName
                      - quantity
                      - image
                      - price
                      - product
                    properties:
                      productName:
                        type: string
                        description: Enter the name of the product user ordering
                        example: Pro Coder T-Shirt
                      quantity:
                        type: number
                        description: Enter the quantity of the product user ordering
                        example: 2
                      image:
                        type: string
                        description: Enter the image of the product
                        example: https://res.cloudinary.com/badjatya/image/upload/v1638206903/lco/t-shirtStore/products/ciky8m2yti3xfpjha6ls.jpg
                      price:
                        type: string
                        description: Enter the price of the product (price=299*quantity)
                        example: 1998
                      product:
                        type: string
                        description: Enter the Id of the product
                        example: 61a50dc455199d36b798e00a
                paymentInfo:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: string
                      description: Enter the id received after payment
                      example: test id
                taxAmount:
                  type: number
                  description: enter the total tax amount
                  example: 50
                shippingAmount:
                  type: number
                  description: enter the total shipping charge
                  example: 100
                totalAmount:
                  type: number
                  description: enter the total amount
                  example: 2248
      responses:
        201:
          description: success, order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  order:
                    type: object
                    properties:
                      _id:
                        type: string
                      user:
                        type: string
                      shippingInfo:
                        type: object
                        properties:
                          address:
                            type: string
                          phoneNumber:
                            type: number
                          city:
                            type: string
                          state:
                            type: string
                          country:
                            type: string
                          postalCode:
                            type: number
                      orderItems:
                        type: array
                        items:
                          type: object
                          properties:
                            productName:
                              type: string
                            quantity:
                              type: number
                            image:
                              type: string
                            price:
                              type: string
                            product:
                              type: string
                      paymentInfo:
                        type: object
                        properties:
                          id:
                            type: string
                      taxAmount:
                        type: number
                      shippingAmount:
                        type: number
                      totalAmount:
                        type: number
                      orderStatus:
                        type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: Bad request, An order must contain shippingInfo, orderItems, paymentInfo, taxAmount, shippingAmount and totalAmount
        500:
          description: internal server error

  /order/myOrder:
    get:
      tags:
        - Order
      summary: user, will get list of all orders that he created
      responses:
        200:
          description: success, list of all orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                  totalOrders:
                    type: number
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        user:
                          type: string
                        shippingInfo:
                          type: object
                          properties:
                            address:
                              type: string
                            phoneNumber:
                              type: number
                            city:
                              type: string
                            state:
                              type: string
                            country:
                              type: string
                            postalCode:
                              type: number
                        orderItems:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                              productName:
                                type: string
                              quantity:
                                type: number
                              image:
                                type: string
                              price:
                                type: string
                              product:
                                type: string
                        paymentInfo:
                          type: object
                          properties:
                            id:
                              type: string
                        taxAmount:
                          type: number
                        shippingAmount:
                          type: number
                        totalAmount:
                          type: number
                        orderStatus:
                          type: string
                        createdAt:
                          type: string
                        __v:
                          type: string
        400:
          description: bad request
        500:
          description: internal server error

  /order/{id}:
    get:
      tags:
        - Order
      summary: get details of an order based on orderId if the logged in user have created the order only than he will get the order
      parameters:
        - name: id
          required: true
          in: path
          default: 61a762c48296832e8eb43aa6
          schema:
            type: string
      responses:
        200:
          description: success, user can view his order
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  order:
                    type: object
                    properties:
                      _id:
                        type: string
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                          name:
                            type: string
                          email:
                            type: string
                          role:
                            type: string
                      shippingInfo:
                        type: object
                        properties:
                          address:
                            type: string
                          phoneNumber:
                            type: number
                          city:
                            type: string
                          state:
                            type: string
                          country:
                            type: string
                          postalCode:
                            type: number
                      orderItems:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            productName:
                              type: string
                            quantity:
                              type: number
                            image:
                              type: string
                            price:
                              type: string
                            product:
                              type: string
                      paymentInfo:
                        type: object
                        properties:
                          id:
                            type: string
                      taxAmount:
                        type: number
                      shippingAmount:
                        type: number
                      totalAmount:
                        type: number
                      orderStatus:
                        type: string
                      createdAt:
                        type: string
                      __v:
                        type: string
        400:
          description: bad request
        404:
          description: Order not found
        500:
          description: internal server error

  /order/admin/orders:
    get:
      tags:
        - Order
      summary: Admin can get all orders but new orders first
      responses:
        200:
          description: success, list of all orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  totalOrders:
                    type: number
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        user:
                          type: string
                        shippingInfo:
                          type: object
                          properties:
                            address:
                              type: string
                            phoneNumber:
                              type: number
                            city:
                              type: string
                            state:
                              type: string
                            country:
                              type: string
                            postalCode:
                              type: number
                        orderItems:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                              productName:
                                type: string
                              quantity:
                                type: number
                              image:
                                type: string
                              price:
                                type: string
                              product:
                                type: string
                        paymentInfo:
                          type: object
                          properties:
                            id:
                              type: string
                        taxAmount:
                          type: number
                        shippingAmount:
                          type: number
                        totalAmount:
                          type: number
                        orderStatus:
                          type: string
                        createdAt:
                          type: string
                        __v:
                          type: string
        400:
          description: bad request
        500:
          description: internal server error

  /order/admin/orders/{id}:
    patch:
      tags:
        - Order
      summary: Admin can update the orderStatus to Delivered, once marked delivered u can not reverse it
      parameters:
        - name: id
          required: true
          in: path
          default: 61a7a75c6c4cae69f52354f1
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - orderStatus
              properties:
                orderStatus:
                  type: string
                  example: Delivered
      responses:
        200:
          description: success, order updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: bad request
        401:
          description: Order Can't be updated again
        500:
          description: internal server error
    delete:
      tags:
        - Order
      summary: Admin can delete the order
      parameters:
        - name: id
          required: true
          in: path
          default: 61a7a75c6c4cae69f52354f1
          schema:
            type: string
      responses:
        200:
          description: success, order deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: bad request
        404:
          description: Order not found
        500:
          description: internal server error
